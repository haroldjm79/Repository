{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.18", "generated_at": "2024-11-08T03:24:51.938737Z", "invocation_id": "8959ff5b-8b68-44fd-af53-a550a6dcfd50", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-08T03:24:46.205166Z", "completed_at": "2024-11-08T03:24:46.331524Z"}, {"name": "execute", "started_at": "2024-11-08T03:24:46.340962Z", "completed_at": "2024-11-08T03:24:51.671794Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.7056684494018555, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b839ac-0102-2dcc-0006-b1e60004100a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dfb_data.dim_dfb_nfl_teams_data", "compiled": true, "compiled_code": "import snowflake.snowpark.functions as F\r\n\r\ndef model(dbt, session):\r\n    df = dbt.ref('py_nfl_data')\r\n    df1 = dbt.ref('fct_nfl_teams')\r\n    data_df = df.join(df1, df['Game_Info'] == df1['abbrev'])\r\n    return data_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"fct_nfl_teams\": \"storage.dfb.fct_nfl_teams\", \"py_nfl_data\": \"storage.dfb.py_nfl_data\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"storage\"\n    schema = \"dfb\"\n    identifier = \"dim_dfb_nfl_teams_data\"\n    \n    def __repr__(self):\n        return 'storage.dfb.dim_dfb_nfl_teams_data'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "relation_name": "storage.dfb.dim_dfb_nfl_teams_data"}], "elapsed_time": 11.208998680114746, "args": {"introspect": true, "include_saved_query": false, "indirect_selection": "eager", "enable_legacy_logger": false, "partial_parse": true, "version_check": true, "log_level": "info", "defer": false, "select": ["fqn:dfb_data.mart.dim_dfb_nfl_teams_data"], "require_explicit_package_overrides_for_builtin_materializations": false, "show_resource_report": false, "favor_state": false, "resource_types": [], "populate_cache": true, "profiles_dir": "C:\\Users\\harol\\.dbt", "print": true, "invocation_command": "dbt build --select fqn:dfb_data.mart.dim_dfb_nfl_teams_data", "use_colors_file": true, "log_format_file": "json", "log_file_max_bytes": 10485760, "macro_debugging": false, "strict_mode": false, "printer_width": 80, "partial_parse_file_diff": true, "warn_error_options": {"include": [], "exclude": []}, "send_anonymous_usage_stats": false, "which": "build", "write_json": true, "target_path": "target\\dbtlearn_dbt_assets-1f140de-eba694e", "log_level_file": "debug", "use_colors": true, "cache_selected_only": false, "project_dir": "C:\\Users\\harol\\Documents\\GitHub\\Repository\\dbt_dailyfantasybuzz\\dfb_data", "vars": {}, "log_path": "C:\\Users\\harol\\Documents\\GitHub\\Repository\\dbt_dailyfantasybuzz\\dfb_data\\target\\dbtlearn_dbt_assets-1f140de-eba694e", "quiet": false, "log_format": "json", "static_parser": true, "show": false, "exclude": []}}