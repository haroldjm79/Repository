{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.18", "generated_at": "2024-11-08T22:44:55.987649Z", "invocation_id": "b58906ce-329c-456a-b7fc-44cf29b5ec07", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-08T22:44:26.686660Z", "completed_at": "2024-11-08T22:44:26.686660Z"}, {"name": "execute", "started_at": "2024-11-08T22:44:26.699888Z", "completed_at": "2024-11-08T22:44:31.726444Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.298077583312988, "adapter_response": {"_message": "INSERT 31", "code": "INSERT", "rows_affected": 31}, "message": "INSERT 31", "failures": null, "unique_id": "seed.dfb_data.seed_nfl_teams", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-08T22:44:32.010386Z", "completed_at": "2024-11-08T22:44:32.043734Z"}, {"name": "execute", "started_at": "2024-11-08T22:44:32.043734Z", "completed_at": "2024-11-08T22:44:34.256308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.647566318511963, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b83e34-0102-2ec6-0006-b1e600047a0e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dfb_data.stg_dfb_data", "compiled": true, "compiled_code": "with  __dbt__cte__src_dfb_nfl_data as (\nWith A as (\r\nselect \r\nDate\r\n,Name\r\n,ID as Player_ID\r\n,ROSTER_POSITION as Position\r\n,Salary\r\n,Concat('$',SALARY) as Salary_Char\r\n,GAME_INFO\r\n,OVER_UNDER\r\n,PPG\r\n,Value\r\n,Projection\r\nfrom dfb.raw_dfb_nfl_data\r\n)select * from A\n), source as (\n    select * from __dbt__cte__src_dfb_nfl_data\n\n)\n\n    select *\n    from source", "relation_name": "storage.dfb.stg_dfb_data"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-08T22:44:34.677645Z", "completed_at": "2024-11-08T22:44:34.957442Z"}, {"name": "execute", "started_at": "2024-11-08T22:44:34.957442Z", "completed_at": "2024-11-08T22:44:37.302756Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.8139801025390625, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b83e34-0102-2ec6-0006-b1e600047a12"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dfb_data.stg_nfl_teams", "compiled": true, "compiled_code": "with source as (\nselect * from storage.dfb.seed_nfl_teams\n)select * from source", "relation_name": "storage.dfb.stg_nfl_teams"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-08T22:44:38.794664Z", "completed_at": "2024-11-08T22:44:38.854142Z"}, {"name": "execute", "started_at": "2024-11-08T22:44:38.858130Z", "completed_at": "2024-11-08T22:44:45.638253Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 6.9851648807525635, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b83e34-0102-2ebe-0006-b1e6000482c2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dfb_data.py_nfl_data", "compiled": true, "compiled_code": "import snowflake.snowpark.functions as F\r\n\r\ndef model(dbt, session):\r\n    data_df = dbt.ref('stg_dfb_data')\r\n    data_df = data_df.drop('PLAYER_ID')\r\n    data_df = data_df.filter(data_df['PPG'] > 1)\r\n    return data_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"stg_dfb_data\": \"storage.dfb.stg_dfb_data\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"storage\"\n    schema = \"dfb\"\n    identifier = \"py_nfl_data\"\n    \n    def __repr__(self):\n        return 'storage.dfb.py_nfl_data'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "relation_name": "storage.dfb.py_nfl_data"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-08T22:44:45.825035Z", "completed_at": "2024-11-08T22:44:45.846404Z"}, {"name": "execute", "started_at": "2024-11-08T22:44:45.861098Z", "completed_at": "2024-11-08T22:44:50.171410Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.605138540267944, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b83e34-0102-2ec6-0006-b1e600047a22"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dfb_data.fct_nfl_teams", "compiled": true, "compiled_code": "import snowflake.snowpark.functions as F\r\n\r\ndef model(dbt, session):\r\n    data_df = dbt.ref('stg_nfl_teams')\r\n    return data_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"stg_nfl_teams\": \"storage.dfb.stg_nfl_teams\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"storage\"\n    schema = \"dfb\"\n    identifier = \"fct_nfl_teams\"\n    \n    def __repr__(self):\n        return 'storage.dfb.fct_nfl_teams'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "relation_name": "storage.dfb.fct_nfl_teams"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-08T22:44:50.427984Z", "completed_at": "2024-11-08T22:44:50.455468Z"}, {"name": "execute", "started_at": "2024-11-08T22:44:50.462011Z", "completed_at": "2024-11-08T22:44:55.544566Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.518873691558838, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b83e34-0102-2ebe-0006-b1e6000482e2"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dfb_data.dim_dfb_nfl_teams_data", "compiled": true, "compiled_code": "import snowflake.snowpark.functions as F\r\n\r\ndef model(dbt, session):\r\n    df = dbt.ref('py_nfl_data')\r\n    df1 = dbt.ref('fct_nfl_teams')\r\n    data_df = df.join(df1, df['Game_Info'] == df1['abbrev'])\r\n    return data_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"fct_nfl_teams\": \"storage.dfb.fct_nfl_teams\", \"py_nfl_data\": \"storage.dfb.py_nfl_data\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"storage\"\n    schema = \"dfb\"\n    identifier = \"dim_dfb_nfl_teams_data\"\n    \n    def __repr__(self):\n        return 'storage.dfb.dim_dfb_nfl_teams_data'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "relation_name": "storage.dfb.dim_dfb_nfl_teams_data"}], "elapsed_time": 37.03986883163452, "args": {"use_colors": true, "target_path": "target\\dbtlearn_dbt_assets-6a774cd-db5023d", "warn_error_options": {"include": [], "exclude": []}, "log_format": "json", "introspect": true, "static_parser": true, "macro_debugging": false, "exclude": ["dim_dfb_nfl_data"], "cache_selected_only": false, "favor_state": false, "write_json": true, "indirect_selection": "eager", "printer_width": 80, "profiles_dir": "C:\\Users\\harol\\.dbt", "which": "build", "version_check": true, "resource_types": [], "strict_mode": false, "vars": {}, "print": true, "populate_cache": true, "show": false, "send_anonymous_usage_stats": false, "defer": false, "enable_legacy_logger": false, "log_level": "info", "log_file_max_bytes": 10485760, "partial_parse_file_diff": true, "require_explicit_package_overrides_for_builtin_materializations": false, "partial_parse": true, "project_dir": "C:\\Users\\harol\\Documents\\GitHub\\Repository\\dbt_dailyfantasybuzz\\dfb_data", "log_path": "C:\\Users\\harol\\Documents\\GitHub\\Repository\\dbt_dailyfantasybuzz\\dfb_data\\target\\dbtlearn_dbt_assets-6a774cd-db5023d", "select": ["fqn:*"], "quiet": false, "log_level_file": "debug", "invocation_command": "dbt build --select fqn:* --exclude dim_dfb_nfl_data", "use_colors_file": true, "show_resource_report": false, "include_saved_query": false, "log_format_file": "json"}}