{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.18", "generated_at": "2024-11-08T03:17:20.131915Z", "invocation_id": "ef00388c-fd18-4623-94ea-4a2599c20834", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-08T03:17:15.836489Z", "completed_at": "2024-11-08T03:17:15.935906Z"}, {"name": "execute", "started_at": "2024-11-08T03:17:15.938452Z", "completed_at": "2024-11-08T03:17:19.756306Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.288741588592529, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b839a5-0102-2dcc-0006-b1e60003fff6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dfb_data.fct_nfl_teams", "compiled": true, "compiled_code": "import snowflake.snowpark.functions as F\r\n\r\ndef model(dbt, session):\r\n    data_df = dbt.ref('stg_nfl_teams')\r\n    return data_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"stg_nfl_teams\": \"storage.dfb.stg_nfl_teams\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"storage\"\n    schema = \"dfb\"\n    identifier = \"fct_nfl_teams\"\n    \n    def __repr__(self):\n        return 'storage.dfb.fct_nfl_teams'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "relation_name": "storage.dfb.fct_nfl_teams"}], "elapsed_time": 8.506396532058716, "args": {"printer_width": 80, "log_file_max_bytes": 10485760, "project_dir": "C:\\Users\\harol\\Documents\\GitHub\\Repository\\dbt_dailyfantasybuzz\\dfb_data", "log_level": "info", "strict_mode": false, "use_colors_file": true, "vars": {"start_date": "2022-01-24T00:00:00+00:00", "end_date": "2024-11-08T00:00:00+00:00"}, "log_format": "json", "indirect_selection": "eager", "introspect": true, "use_colors": true, "target_path": "target\\dbtlearn_partitioned_dbt_assets-45bd42f-25b71e9", "partial_parse": true, "show": false, "log_format_file": "json", "defer": false, "select": ["fct_nfl_teams"], "favor_state": false, "static_parser": true, "cache_selected_only": false, "profiles_dir": "C:\\Users\\harol\\.dbt", "macro_debugging": false, "show_resource_report": false, "invocation_command": "dbt build --vars {\"start_date\": \"2022-01-24T00:00:00+00:00\", \"end_date\": \"2024-11-08T00:00:00+00:00\"} --select fct_nfl_teams", "exclude": [], "populate_cache": true, "partial_parse_file_diff": true, "which": "build", "log_path": "C:\\Users\\harol\\Documents\\GitHub\\Repository\\dbt_dailyfantasybuzz\\dfb_data\\target\\dbtlearn_partitioned_dbt_assets-45bd42f-25b71e9", "send_anonymous_usage_stats": false, "version_check": true, "enable_legacy_logger": false, "quiet": false, "resource_types": [], "warn_error_options": {"include": [], "exclude": []}, "include_saved_query": false, "require_explicit_package_overrides_for_builtin_materializations": false, "log_level_file": "debug", "print": true, "write_json": true}}